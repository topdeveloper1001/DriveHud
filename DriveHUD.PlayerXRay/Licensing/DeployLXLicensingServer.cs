//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.6.1055.0.
// 
namespace DriveHUD.PlayerXRay.Licensing
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "DeployLX|Licensing® ServerSoap", Namespace = "http://www.xheo.com/licensing/v3_0")]
    public partial class DeployLXLicensingServer : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback GetExpiryDateOperationCompleted;

        private System.Threading.SendOrPostCallback RegisterTrialOperationCompleted;

        private System.Threading.SendOrPostCallback DispatchOperationCompleted;

        /// <remarks/>
        public DeployLXLicensingServer()
        {
            this.Url = "http://support.acepokersolutions.com/LicensingWS/LicenseServerXRay.asmx";
        }

        /// <remarks/>
        public event GetExpiryDateCompletedEventHandler GetExpiryDateCompleted;

        /// <remarks/>
        public event RegisterTrialCompletedEventHandler RegisterTrialCompleted;

        /// <remarks/>
        public event DispatchCompletedEventHandler DispatchCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/v3_0/GetExpiryDate", RequestNamespace = "http://www.xheo.com/licensing/v3_0", ResponseNamespace = "http://www.xheo.com/licensing/v3_0", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime[] GetExpiryDate(string[] serials)
        {
            object[] results = this.Invoke("GetExpiryDate", new object[] {
                        serials});
            return ((System.DateTime[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetExpiryDate(string[] serials, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetExpiryDate", new object[] {
                        serials}, callback, asyncState);
        }

        /// <remarks/>
        public System.DateTime[] EndGetExpiryDate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime[])(results[0]));
        }

        /// <remarks/>
        public void GetExpiryDateAsync(string[] serials)
        {
            this.GetExpiryDateAsync(serials, null);
        }

        /// <remarks/>
        public void GetExpiryDateAsync(string[] serials, object userState)
        {
            if ((this.GetExpiryDateOperationCompleted == null))
            {
                this.GetExpiryDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExpiryDateOperationCompleted);
            }
            this.InvokeAsync("GetExpiryDate", new object[] {
                        serials}, this.GetExpiryDateOperationCompleted, userState);
        }

        private void OnGetExpiryDateOperationCompleted(object arg)
        {
            if ((this.GetExpiryDateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExpiryDateCompleted(this, new GetExpiryDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/v3_0/RegisterTrial", RequestNamespace = "http://www.xheo.com/licensing/v3_0", ResponseNamespace = "http://www.xheo.com/licensing/v3_0", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterTrial(string email)
        {
            object[] results = this.Invoke("RegisterTrial", new object[] {
                        email});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRegisterTrial(string email, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RegisterTrial", new object[] {
                        email}, callback, asyncState);
        }

        /// <remarks/>
        public string EndRegisterTrial(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void RegisterTrialAsync(string email)
        {
            this.RegisterTrialAsync(email, null);
        }

        /// <remarks/>
        public void RegisterTrialAsync(string email, object userState)
        {
            if ((this.RegisterTrialOperationCompleted == null))
            {
                this.RegisterTrialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterTrialOperationCompleted);
            }
            this.InvokeAsync("RegisterTrial", new object[] {
                        email}, this.RegisterTrialOperationCompleted, userState);
        }

        private void OnRegisterTrialOperationCompleted(object arg)
        {
            if ((this.RegisterTrialCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterTrialCompleted(this, new RegisterTrialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/v3_0/Dispatch", RequestNamespace = "http://www.xheo.com/licensing/v3_0", ResponseNamespace = "http://www.xheo.com/licensing/v3_0", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] Dispatch(string command, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] licenseXml, string licenseId, string limitId, string key, string clientCulture, string properties, string salt)
        {
            object[] results = this.Invoke("Dispatch", new object[] {
                        command,
                        licenseXml,
                        licenseId,
                        limitId,
                        key,
                        clientCulture,
                        properties,
                        salt});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDispatch(string command, byte[] licenseXml, string licenseId, string limitId, string key, string clientCulture, string properties, string salt, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Dispatch", new object[] {
                        command,
                        licenseXml,
                        licenseId,
                        limitId,
                        key,
                        clientCulture,
                        properties,
                        salt}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndDispatch(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void DispatchAsync(string command, byte[] licenseXml, string licenseId, string limitId, string key, string clientCulture, string properties, string salt)
        {
            this.DispatchAsync(command, licenseXml, licenseId, limitId, key, clientCulture, properties, salt, null);
        }

        /// <remarks/>
        public void DispatchAsync(string command, byte[] licenseXml, string licenseId, string limitId, string key, string clientCulture, string properties, string salt, object userState)
        {
            if ((this.DispatchOperationCompleted == null))
            {
                this.DispatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDispatchOperationCompleted);
            }
            this.InvokeAsync("Dispatch", new object[] {
                        command,
                        licenseXml,
                        licenseId,
                        limitId,
                        key,
                        clientCulture,
                        properties,
                        salt}, this.DispatchOperationCompleted, userState);
        }

        private void OnDispatchOperationCompleted(object arg)
        {
            if ((this.DispatchCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DispatchCompleted(this, new DispatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void GetExpiryDateCompletedEventHandler(object sender, GetExpiryDateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExpiryDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetExpiryDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.DateTime[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void RegisterTrialCompletedEventHandler(object sender, RegisterTrialCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterTrialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RegisterTrialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void DispatchCompletedEventHandler(object sender, DispatchCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DispatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DispatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}
