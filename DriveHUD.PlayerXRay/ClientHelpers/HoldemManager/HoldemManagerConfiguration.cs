//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Usings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Xml.Schema;
using System.Xml.Serialization;
using AcePokerSolutions.BusinessHelper;

#endregion

namespace AcePokerSolutions.ClientHelpers.HoldemManager
{
    [Serializable]   
    [DesignerCategory(@"code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", ElementName = "configuration", IsNullable = false)]
    public class HoldemManagerConfiguration
    {
        public HoldemManagerConfiguration()
        {
        }

        //public HoldemManagerConfiguration(string filePath)
        //{
        //    FilePath = filePath;
        //    string xml = File.ReadAllText(filePath);
        //    HoldemManagerConfiguration config =
        //        (HoldemManagerConfiguration) Serializer.FromXml(xml, typeof (HoldemManagerConfiguration));
        //    Settings = config.Settings;
        //}

        public string FilePath { get; set; }

        [XmlElement("setting", Form = XmlSchemaForm.Unqualified,
            IsNullable = true)]
        public List<HoldemManagerConfigurationSetting> Settings { get; set; }

        #region Defined Properties

        [XmlIgnore]
        public string ConnectionString
        {
            get { return Settings.Find(p => p.Name == "ConnectionString").Value; }
        }

        [XmlIgnore]
        public string CurrentDatabase
        {
            get { return Settings.Find(p => p.Name == "CurrentDatabase").Value; }
        }

        [XmlIgnore]
        public int CurrentPlayerID
        {
            get { return Int32.Parse(Settings.Find(p => p.Name == "CurrentPlayerID").Value); }
        }

        #endregion

        public bool CheckHmInstalled()
        {
            try
            {
                LoadFromDefaultPath();
                return true;
            }
            catch
            {
                return false;
            }
        }

        public void LoadFromDefaultPath()
        {
            FilePath = GetHMConfigPath();
            string xml = File.ReadAllText(FilePath);
            HoldemManagerConfiguration config =
                (HoldemManagerConfiguration) Serializer.FromXml(xml, typeof (HoldemManagerConfiguration));
            Settings = config.Settings;
        }

        public static String GetHMConfigPath()
        {
            const string defaultPath = "Config\\HoldemManager.config";

            if (File.Exists(defaultPath))
                return defaultPath;

            string fn = "Program Files\\Holdem Manager 2\\Config\\HoldemManager.config";
            char let = 'c';
            string fnn = let + ":\\" + fn;

            while (!File.Exists(fnn) && (let < 'z'))
            {
                let = (char) (let + 1);
                fnn = let + ":\\" + fn;
            }

            if (!File.Exists(fnn))
            {
                fn = "Program Files (x86)\\Holdem Manager 2\\Config\\HoldemManager.config";
                let = 'c';
                fnn = let + ":\\" + fn;
                while (!File.Exists(fnn) && (let < 'z'))
                {
                    let = (char) (let + 1);
                    fnn = let + ":\\" + fn;
                }
            }

            if (!File.Exists(fnn))
            {
                fnn = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) +
                      "\\Holdem Manager 2\\Config\\HoldemManager.config";
            }

            return fnn;
        }
    }

    [SerializableAttribute]
    //[DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    public class HoldemManagerConfigurationSetting
    {
        [XmlAttributeAttribute("name", Form = XmlSchemaForm.Unqualified)]
        public string Name { get; set; }

        [XmlTextAttribute]
        public string Value { get; set; }
    }
}