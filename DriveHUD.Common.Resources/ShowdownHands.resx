<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Showdown_BottomPair" xml:space="preserve">
    <value>B) One Pair: Bottom Pair</value>
  </data>
  <data name="Showdown_FlushOneCardHigh" xml:space="preserve">
    <value>F) Flush: One Card High Flush</value>
  </data>
  <data name="Showdown_FlushOneCardLow" xml:space="preserve">
    <value>F) Flush: One Card Low Flush</value>
  </data>
  <data name="Showdown_FlushOneCardNut" xml:space="preserve">
    <value>F) Flush: OneCard Nut Flush</value>
  </data>
  <data name="Showdown_FlushTwoCardHigh" xml:space="preserve">
    <value>F) Flush: Two Card High Flush</value>
  </data>
  <data name="Showdown_FlushTwoCardLow" xml:space="preserve">
    <value>F) Flush: Two Card Low Flush</value>
  </data>
  <data name="Showdown_FlushTwoCardNut" xml:space="preserve">
    <value>F) Flush: Two Card Nut Flush</value>
  </data>
  <data name="Showdown_FourOfAKindNoPocketPair" xml:space="preserve">
    <value>H) Four of a Kind: Without Pocket Pair</value>
  </data>
  <data name="Showdown_FourOfAKindPocketPair" xml:space="preserve">
    <value>H) Four of a Kind: With Pocket Pair</value>
  </data>
  <data name="Showdown_FullHouseOneHoleCardNoTripsOnBoard" xml:space="preserve">
    <value>G) Full House: With 1 Hole Card – No Trips on Board</value>
  </data>
  <data name="Showdown_FullHousePocketPairNoTripsOnBoard" xml:space="preserve">
    <value>G) Full House: With Pocket Pair– No Trips on Board</value>
  </data>
  <data name="Showdown_FullHousePocketPairTripsOnBoard" xml:space="preserve">
    <value>G) Full House: With Pocket Pair – Trips on Board</value>
  </data>
  <data name="Showdown_FullHouseTwoPocketCardNoTripsOnBoard" xml:space="preserve">
    <value>G) Full House: With 2 Pocket Cards – No Trips on Board</value>
  </data>
  <data name="Showdown_HighCard" xml:space="preserve">
    <value>A) High Card</value>
  </data>
  <data name="Showdown_PocketPairOverpair" xml:space="preserve">
    <value>B) One Pair: Pocket Pair – Overpair</value>
  </data>
  <data name="Showdown_PocketPairSecondOrWorse" xml:space="preserve">
    <value>B) One Pair: Pocket Pair – Second Pair or worse</value>
  </data>
  <data name="Showdown_RoyalFlushOneHoleCard" xml:space="preserve">
    <value>J) Royal Flush: With 1 Hole Card</value>
  </data>
  <data name="Showdown_RoyalFlushTwoPocketCards" xml:space="preserve">
    <value>J) Royal Flush: With 2 Pocket Cards</value>
  </data>
  <data name="Showdown_SecondPair" xml:space="preserve">
    <value>B) One Pair: Second Pair</value>
  </data>
  <data name="Showdown_StraightFlushOneHoleCard" xml:space="preserve">
    <value>I) Straight Flush: With 1 Hole Card</value>
  </data>
  <data name="Showdown_StraightFlushTwoPocketCards" xml:space="preserve">
    <value>I) Straight Flush: With 2 Pocket Cards</value>
  </data>
  <data name="Showdown_StraightOneCard" xml:space="preserve">
    <value>E) Straight: One Card Straight</value>
  </data>
  <data name="Showdown_StraightOneCardBottom" xml:space="preserve">
    <value>E) Straight: One Card Bottom Straight</value>
  </data>
  <data name="Showdown_StraightOneCardNut" xml:space="preserve">
    <value>E) Straight:  One Card Nut Straight</value>
  </data>
  <data name="Showdown_StraightTwoCard" xml:space="preserve">
    <value>E) Straight: Two Card Straight</value>
  </data>
  <data name="Showdown_StraightTwoCardBottom" xml:space="preserve">
    <value>E) Straight: Two Card Bottom Straight</value>
  </data>
  <data name="Showdown_StraightTwoCardNut" xml:space="preserve">
    <value>E) Straight:  Two Card Nut Straight</value>
  </data>
  <data name="Showdown_ThirdPair" xml:space="preserve">
    <value>B) One Pair: Third Pair</value>
  </data>
  <data name="Showdown_ThreeOfAKindBottomSet" xml:space="preserve">
    <value>D) Three of a Kind: Set – Bottom Set</value>
  </data>
  <data name="Showdown_ThreeOfAKindMiddleSet" xml:space="preserve">
    <value>D) Three of a Kind: Set – Middle Set</value>
  </data>
  <data name="Showdown_ThreeOfAKindTopSet" xml:space="preserve">
    <value>D) Three of a Kind: Set – Top Set</value>
  </data>
  <data name="Showdown_ThreeOfAKindTripsHighKicker" xml:space="preserve">
    <value>D) Three of a Kind: Trips – High Kicker</value>
  </data>
  <data name="Showdown_ThreeOfAKindTripsOnFlop" xml:space="preserve">
    <value>D) Three of a Kind: Trips – Three of a Kind on Flop</value>
  </data>
  <data name="Showdown_ThreeOfAKindTripsWeakKicker" xml:space="preserve">
    <value>D) Three of a Kind: Trips – Weak Kicker</value>
  </data>
  <data name="Showdown_TopPair" xml:space="preserve">
    <value>B) One Pair: Top Pair</value>
  </data>
  <data name="Showdown_TopPairTopKicker" xml:space="preserve">
    <value>B) One Pair: Top Pair – Top Kicker</value>
  </data>
  <data name="Showdown_TwoPairNoTopPair" xml:space="preserve">
    <value>C) Two Pair: No Top Pair</value>
  </data>
  <data name="Showdown_TwoPairTopTwoPair" xml:space="preserve">
    <value>C) Two Pair: Top Two Pair</value>
  </data>
</root>