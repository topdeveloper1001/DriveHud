<UserControl
    x:Class="DriveHUD.EquityCalculator.Views.EquityCalculatorView"
    x:Name="EquityCalculator"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"
    xmlns:dh="http://www.acepokersolutions.com/winfx/2015/xaml/presentation"
    xmlns:prism="http://www.codeplex.com/prism"
    xmlns:popup="clr-namespace:DriveHUD.Common.Wpf.Actions;assembly=DriveHUD.Common.Wpf"
    xmlns:control="clr-namespace:DriveHUD.Common.Wpf.Controls;assembly=DriveHUD.Common.Wpf"
    xmlns:converter="clr-namespace:DriveHUD.Common.Wpf.Converters;assembly=DriveHUD.Common.Wpf"
    xmlns:vm="clr-namespace:DriveHUD.EquityCalculator.ViewModels"
    xmlns:v="clr-namespace:DriveHUD.EquityCalculator.Views"
    xmlns:streetEnum="clr-namespace:HandHistories.Objects.Cards;assembly=HandHistories.Objects"
    mc:Ignorable="d"
    d:DesignHeight="1000"
    d:DesignWidth="1000">

    <UserControl.DataContext>
        <vm:EquityCalculatorViewModel />
    </UserControl.DataContext>

    <i:Interaction.Triggers>
        <prism:InteractionRequestTrigger
            SourceObject="{Binding CardSelectorRequest, Mode=OneWay}">
            <popup:PopupTelerikWindowAction
                IsModal="True">
                <popup:PopupTelerikWindowAction.WindowStyle>
                    <Style
                        TargetType="{x:Type telerik:RadWindow}">
                        <Setter
                            Property="MinWidth"
                            Value="930" />
                        <Setter
                            Property="Width"
                            Value="930" />
                        <Setter
                            Property="Foreground"
                            Value="#7D7F84" />
                        <Setter
                            Property="Background"
                            Value="#1F2124" />
                        <Setter
                            Property="SizeToContent"
                            Value="True" />
                        <Setter
                            Property="HideMaximizeButton"
                            Value="True" />
                        <Setter
                            Property="ResizeMode"
                            Value="NoResize" />
                        <Setter
                            Property="WindowStartupLocation"
                            Value="CenterScreen" />
                    </Style>
                </popup:PopupTelerikWindowAction.WindowStyle>
                <popup:PopupTelerikWindowAction.WindowContent>
                    <v:SelectorMainContainerView />
                </popup:PopupTelerikWindowAction.WindowContent>
            </popup:PopupTelerikWindowAction>
        </prism:InteractionRequestTrigger>

        <prism:InteractionRequestTrigger
            SourceObject="{Binding CalculateBluffRequest, Mode=OneWay}">
            <popup:PopupTelerikWindowAction
                IsModal="True">
                <popup:PopupTelerikWindowAction.WindowStyle>
                    <Style
                        TargetType="{x:Type telerik:RadWindow}">
                        <Setter
                            Property="MinWidth"
                            Value="330" />
                        <Setter
                            Property="SizeToContent"
                            Value="True" />
                        <Setter
                            Property="Foreground"
                            Value="#7D7F84" />
                        <Setter
                            Property="Background"
                            Value="#1F2124" />
                        <Setter
                            Property="WindowStartupLocation"
                            Value="CenterScreen" />
                    </Style>
                </popup:PopupTelerikWindowAction.WindowStyle>
                <popup:PopupTelerikWindowAction.WindowContent>
                    <v:CalculateBluffView />
                </popup:PopupTelerikWindowAction.WindowContent>
            </popup:PopupTelerikWindowAction>
        </prism:InteractionRequestTrigger>

        <prism:InteractionRequestTrigger
            SourceObject="{Binding ExportRequest, Mode=OneWay}">
            <popup:PopupTelerikWindowAction
                IsModal="True">
                <popup:PopupTelerikWindowAction.WindowStyle>
                    <Style
                        TargetType="{x:Type telerik:RadWindow}">
                        <Setter
                            Property="Foreground"
                            Value="#7D7F84" />
                        <Setter
                            Property="Background"
                            Value="#1F2124" />
                        <Setter
                            Property="SizeToContent"
                            Value="True" />
                        <Setter
                            Property="WindowStartupLocation"
                            Value="CenterScreen" />
                    </Style>
                </popup:PopupTelerikWindowAction.WindowStyle>
                <popup:PopupTelerikWindowAction.WindowContent>
                    <v:ExportView />
                </popup:PopupTelerikWindowAction.WindowContent>
            </popup:PopupTelerikWindowAction>
        </prism:InteractionRequestTrigger>
    </i:Interaction.Triggers>

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary
                    Source="pack://application:,,,/DriveHUD.Common.Wpf;component/ControlStyles/CardImageBinder.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <converter:BoolNotConverter
                x:Key="BoolNotConverter" />
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.InputBindings>
            <KeyBinding
                Key="R"
                Modifiers="Ctrl"
                Command="{Binding SetAutoRangeForHeroCommand}" />
        </Grid.InputBindings>
        <Grid.ColumnDefinitions>
            <ColumnDefinition
                Width="Auto" />
            <ColumnDefinition
                Width="*" />
        </Grid.ColumnDefinitions>

        <StackPanel
            Grid.Column="0"
            Width="300"
            Orientation="Vertical">
            <DockPanel
                HorizontalAlignment="Stretch">
                <TextBlock
                    DockPanel.Dock="Left"
                    Text="{ResX Common_EquityCalculator}"
                    Style="{StaticResource Title_H1}" />
                <Button
                    DockPanel.Dock="Right"
                    Margin="5"
                    HorizontalAlignment="Right"
                    IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}"
                    Command="{Binding ClearCommand}"
                    Content="{ResX Common_Clear}"
                    Width="90"
                    Height="30" />
            </DockPanel>

            <Separator />

            <ItemsControl
                ItemsSource="{Binding Board.Cards}"
                IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}">

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel
                            x:Name="Cards"
                            Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <control:CardImageControl
                            Width="60"
                            Height="Auto"
                            Command="{Binding DataContext.SelectCommand, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                            RankValue="{Binding Rank}"
                            SuitValue="{Binding Suit}"
                            Style="{StaticResource CardImageBinder}" />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>

            </ItemsControl>

            <!--<UniformGrid Columns="2" HorizontalAlignment="Stretch">
                <Button Grid.Column="0" Margin="5" HorizontalAlignment="Right" IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}" Command="{Binding SelectCommand}" Content="{ResX Common_Select}" Width="90" Height="30" d:LayoutOverrides="LeftPosition, RightPosition, TopPosition, BottomPosition"/>
                <Button Grid.Column="1" Margin="5" HorizontalAlignment="Left" IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}" Command="{Binding ClearCommand}" Content="{ResX Common_Clear}"  Width="90"  Height="30" d:LayoutOverrides="TopPosition, BottomPosition" />
            </UniformGrid>
-->
            <Separator />


            <StackPanel
                HorizontalAlignment="Center">
                <Button
                    Command="{Binding CalculateEquityCommand}"
                    Height="30"
                    Width="180"
                    Margin="5">
                    <Button.Style>
                        <Style
                            TargetType="Button"
                            BasedOn="{StaticResource {x:Type Button}}">
                            <Style.Triggers>
                                <DataTrigger
                                    Binding="{Binding IsCalculationRunning}"
                                    Value="True">
                                    <Setter
                                        Property="Content"
                                        Value="{ResX Common_StopCalculation}" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsCalculationRunning}"
                                    Value="False">
                                    <Setter
                                        Property="Content"
                                        Value="{ResX Common_CalculateEquity}" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsCalculationRunning}"
                                    Value="{x:Null}">
                                    <Setter
                                        Property="Content"
                                        Value="{ResX Common_StoppingCalculation}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button
                    Command="{Binding ExportDataCommand}"
                    IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}"
                    Visibility="{Binding IsCanExport, Converter={dh:BoolToVisibilityConverter}}"
                    Height="30"
                    Width="180"
                    Margin="5"
                    Content="{ResX Common_ExportData}" />
                <Button
                    Command="{Binding ResetAllCommand}"
                    IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}"
                    Height="30"
                    Width="180"
                    Margin="5"
                    Content="{ResX Common_ResetAll}" />
            </StackPanel>

            <Separator />

            <UniformGrid
                Columns="4"
                HorizontalAlignment="Stretch">
                <RadioButton
                    GroupName="StreetBtn"
                    Grid.Column="0"
                    Margin="5"
                    Command="{Binding ShowStreetCardsCommand}"
                    CommandParameter="{x:Static streetEnum:Street.Preflop}"
                    IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}"
                    IsChecked="{Binding CurrentStreet, Converter={dh:EnumBoolConverter}, ConverterParameter={x:Static streetEnum:Street.Preflop}}"
                    Visibility="{Binding IsPreflopVisible, Converter={dh:BoolToVisibilityConverter}}"
                    Content="{ResX Common_Preflop}"
                    Height="30"
                    Style="{StaticResource RadioButtonStyle}" />
                <RadioButton
                    GroupName="StreetBtn"
                    Grid.Column="1"
                    Margin="5"
                    Command="{Binding ShowStreetCardsCommand}"
                    CommandParameter="{x:Static streetEnum:Street.Flop}"
                    IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}"
                    IsChecked="{Binding CurrentStreet, Converter={dh:EnumBoolConverter}, ConverterParameter={x:Static streetEnum:Street.Flop}}"
                    Visibility="{Binding IsFlopVisible, Converter={dh:BoolToVisibilityConverter}}"
                    Content="{ResX Common_Flop}"
                    Height="30"
                    Style="{StaticResource RadioButtonStyle}" />
                <RadioButton
                    GroupName="StreetBtn"
                    Grid.Column="2"
                    Margin="5"
                    Command="{Binding ShowStreetCardsCommand}"
                    CommandParameter="{x:Static streetEnum:Street.Turn}"
                    IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}"
                    IsChecked="{Binding CurrentStreet, Converter={dh:EnumBoolConverter}, ConverterParameter={x:Static streetEnum:Street.Turn}}"
                    Visibility="{Binding IsTurnVisible, Converter={dh:BoolToVisibilityConverter}}"
                    Content="{ResX Common_Turn}"
                    Height="30"
                    Style="{StaticResource RadioButtonStyle}" />
                <RadioButton
                    GroupName="StreetBtn"
                    Grid.Column="3"
                    Margin="5"
                    Command="{Binding ShowStreetCardsCommand}"
                    CommandParameter="{x:Static streetEnum:Street.River}"
                    IsEnabled="{Binding IsCalculationRunning, Converter={StaticResource BoolNotConverter}}"
                    IsChecked="{Binding CurrentStreet, Converter={dh:EnumBoolConverter}, ConverterParameter={x:Static streetEnum:Street.River}}"
                    Visibility="{Binding IsRiverVisible, Converter={dh:BoolToVisibilityConverter}}"
                    Content="{ResX Common_River}"
                    Height="30"
                    Style="{StaticResource RadioButtonStyle}" />
            </UniformGrid>

            <Separator />

            <CheckBox
                Margin="5"
                Content="{ResX Common_AutoGenerateHand}"
                HorizontalAlignment="Center"
                IsChecked="{Binding AutoGenerateHandRanges, Mode=TwoWay}" />

            <TextBlock
                Text="{ResX Error_EC_NotEnoughPlayers}"
                HorizontalAlignment="Center"
                Visibility="{Binding IsCalculateEquityError, Converter={dh:BoolToVisibilityConverter}}"
                TextWrapping="Wrap" />
        </StackPanel>

        <Grid
            Grid.Column="1">
            <v:EquityCalculatorPlayerPartialView />
        </Grid>
    </Grid>
</UserControl>