



        public bool IsEqualStat(string name, params object[] objects)
        {
            var stat = TempStat.Statistic.FirstOrDefault(x => x.PlayerName == name && x.Numberofplayers == (int)objects[23]);
            if (stat == null)
                return false;

			bool result = true;

            if (stat.Wonhand != (int)objects[0])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonhand", stat.Wonhand, (int)objects[0]);
                result = false;
            }
               if (stat.Totalpostflopstreetsseen != (int)objects[1])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Totalpostflopstreetsseen", stat.Totalpostflopstreetsseen, (int)objects[1]);
                result = false;
            }
               if (stat.Bigblindstealdefended != (int)objects[2])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Bigblindstealdefended", stat.Bigblindstealdefended, (int)objects[2]);
                result = false;
            }
               if (stat.Calledthreebetpreflop != (int)objects[3])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Calledthreebetpreflop", stat.Calledthreebetpreflop, (int)objects[3]);
                result = false;
            }
               if (stat.Turnfoldippassonflopcb != (int)objects[4])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Turnfoldippassonflopcb", stat.Turnfoldippassonflopcb, (int)objects[4]);
                result = false;
            }
               if (stat.Rivercallippassonturncb != (int)objects[5])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Rivercallippassonturncb", stat.Rivercallippassonturncb, (int)objects[5]);
                result = false;
            }
               if (stat.Playedyearandmonth != (int)objects[6])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Playedyearandmonth", stat.Playedyearandmonth, (int)objects[6]);
                result = false;
            }
               if (stat.Turncontinuationbetmade != (int)objects[7])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Turncontinuationbetmade", stat.Turncontinuationbetmade, (int)objects[7]);
                result = false;
            }
               if (stat.Wonhandwhensawturn != (int)objects[8])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonhandwhensawturn", stat.Wonhandwhensawturn, (int)objects[8]);
                result = false;
            }
               if (stat.Turncontinuationbetpossible != (int)objects[9])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Turncontinuationbetpossible", stat.Turncontinuationbetpossible, (int)objects[9]);
                result = false;
            }
               if (stat.Couldcoldcall != (int)objects[10])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Couldcoldcall", stat.Couldcoldcall, (int)objects[10]);
                result = false;
            }
               if (stat.Totalamountwonincents != (int)objects[11])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Totalamountwonincents", stat.Totalamountwonincents, (int)objects[11]);
                result = false;
            }
               if (stat.Facedfourbetpreflop != (int)objects[12])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Facedfourbetpreflop", stat.Facedfourbetpreflop, (int)objects[12]);
                result = false;
            }
               if (stat.Flopcontinuationbetpossible != (int)objects[13])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Flopcontinuationbetpossible", stat.Flopcontinuationbetpossible, (int)objects[13]);
                result = false;
            }
               if (stat.Riverfoldippassonturncb != (int)objects[14])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Riverfoldippassonturncb", stat.Riverfoldippassonturncb, (int)objects[14]);
                result = false;
            }
               if (stat.Facingturncontinuationbet != (int)objects[15])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Facingturncontinuationbet", stat.Facingturncontinuationbet, (int)objects[15]);
                result = false;
            }
               if (stat.Sawlargeshowdown != (int)objects[16])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Sawlargeshowdown", stat.Sawlargeshowdown, (int)objects[16]);
                result = false;
            }
               if (stat.Raisedthreebetpreflop != (int)objects[17])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Raisedthreebetpreflop", stat.Raisedthreebetpreflop, (int)objects[17]);
                result = false;
            }
               if (stat.Vpiphands != (int)objects[18])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Vpiphands", stat.Vpiphands, (int)objects[18]);
                result = false;
            }
               if (stat.Facingrivercontinuationbet != (int)objects[19])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Facingrivercontinuationbet", stat.Facingrivercontinuationbet, (int)objects[19]);
                result = false;
            }
               if (stat.Wonnonsmallshowdown != (int)objects[20])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonnonsmallshowdown", stat.Wonnonsmallshowdown, (int)objects[20]);
                result = false;
            }
               if (stat.Totalbets != (int)objects[21])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Totalbets", stat.Totalbets, (int)objects[21]);
                result = false;
            }
               if (stat.Riverraiseippassonturncb != (int)objects[22])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Riverraiseippassonturncb", stat.Riverraiseippassonturncb, (int)objects[22]);
                result = false;
            }
               if (stat.Numberofplayers != (int)objects[23])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Numberofplayers", stat.Numberofplayers, (int)objects[23]);
                result = false;
            }
               if (stat.Pfrhands != (int)objects[24])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Pfrhands", stat.Pfrhands, (int)objects[24]);
                result = false;
            }
               if (stat.Smallblindstealdefended != (int)objects[25])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Smallblindstealdefended", stat.Smallblindstealdefended, (int)objects[25]);
                result = false;
            }
               if (stat.Wonhandwhensawriver != (int)objects[26])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonhandwhensawriver", stat.Wonhandwhensawriver, (int)objects[26]);
                result = false;
            }
               if (stat.Foldedtoflopcontinuationbet != (int)objects[27])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Foldedtoflopcontinuationbet", stat.Foldedtoflopcontinuationbet, (int)objects[27]);
                result = false;
            }
               if (stat.Wonnonsmallshowdownlimpedflop != (int)objects[28])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonnonsmallshowdownlimpedflop", stat.Wonnonsmallshowdownlimpedflop, (int)objects[28]);
                result = false;
            }
               if (stat.Calledfourbetpreflop != (int)objects[29])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Calledfourbetpreflop", stat.Calledfourbetpreflop, (int)objects[29]);
                result = false;
            }
               if (stat.Rivercontinuationbetmade != (int)objects[30])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Rivercontinuationbetmade", stat.Rivercontinuationbetmade, (int)objects[30]);
                result = false;
            }
               if (stat.Calledturncontinuationbet != (int)objects[31])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Calledturncontinuationbet", stat.Calledturncontinuationbet, (int)objects[31]);
                result = false;
            }
               if (stat.Bigblindstealreraised != (int)objects[32])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Bigblindstealreraised", stat.Bigblindstealreraised, (int)objects[32]);
                result = false;
            }
               if (stat.Totalcalls != (int)objects[33])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Totalcalls", stat.Totalcalls, (int)objects[33]);
                result = false;
            }
               if (stat.Sawshowdown != (int)objects[34])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Sawshowdown", stat.Sawshowdown, (int)objects[34]);
                result = false;
            }
               if (stat.Calledflopcontinuationbet != (int)objects[35])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Calledflopcontinuationbet", stat.Calledflopcontinuationbet, (int)objects[35]);
                result = false;
            }
               if (stat.Bigblindstealattempted != (int)objects[36])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Bigblindstealattempted", stat.Bigblindstealattempted, (int)objects[36]);
                result = false;
            }
               if (stat.Turnraiseippassonflopcb != (int)objects[37])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Turnraiseippassonflopcb", stat.Turnraiseippassonflopcb, (int)objects[37]);
                result = false;
            }
               if (stat.Turncallippassonflopcb != (int)objects[38])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Turncallippassonflopcb", stat.Turncallippassonflopcb, (int)objects[38]);
                result = false;
            }
               if (stat.Wonlargeshowdown != (int)objects[39])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonlargeshowdown", stat.Wonlargeshowdown, (int)objects[39]);
                result = false;
            }
               if (stat.Couldthreebet != (int)objects[40])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Couldthreebet", stat.Couldthreebet, (int)objects[40]);
                result = false;
            }
               if (stat.Smallblindstealattempted != (int)objects[41])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Smallblindstealattempted", stat.Smallblindstealattempted, (int)objects[41]);
                result = false;
            }
               if (stat.Sawnonsmallshowdown != (int)objects[42])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Sawnonsmallshowdown", stat.Sawnonsmallshowdown, (int)objects[42]);
                result = false;
            }
               if (stat.Foldedtothreebetpreflop != (int)objects[43])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Foldedtothreebetpreflop", stat.Foldedtothreebetpreflop, (int)objects[43]);
                result = false;
            }
               if (stat.Foldedtorivercontinuationbet != (int)objects[44])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Foldedtorivercontinuationbet", stat.Foldedtorivercontinuationbet, (int)objects[44]);
                result = false;
            }
               if (stat.Raisedturncontinuationbet != (int)objects[45])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Raisedturncontinuationbet", stat.Raisedturncontinuationbet, (int)objects[45]);
                result = false;
            }
               if (stat.Smallblindstealreraised != (int)objects[46])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Smallblindstealreraised", stat.Smallblindstealreraised, (int)objects[46]);
                result = false;
            }
               if (stat.Wonshowdown != (int)objects[47])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonshowdown", stat.Wonshowdown, (int)objects[47]);
                result = false;
            }
               if (stat.Raisedflopcontinuationbet != (int)objects[48])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Raisedflopcontinuationbet", stat.Raisedflopcontinuationbet, (int)objects[48]);
                result = false;
            }
               if (stat.Wonhandwhensawflop != (int)objects[49])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonhandwhensawflop", stat.Wonhandwhensawflop, (int)objects[49]);
                result = false;
            }
               if (stat.Flopcontinuationbetmade != (int)objects[50])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Flopcontinuationbetmade", stat.Flopcontinuationbetmade, (int)objects[50]);
                result = false;
            }
               if (stat.Foldedtoturncontinuationbet != (int)objects[51])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Foldedtoturncontinuationbet", stat.Foldedtoturncontinuationbet, (int)objects[51]);
                result = false;
            }
               if (stat.Calledtwopreflopraisers != (int)objects[52])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Calledtwopreflopraisers", stat.Calledtwopreflopraisers, (int)objects[52]);
                result = false;
            }
               if (stat.Raisedtwopreflopraisers != (int)objects[53])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Raisedtwopreflopraisers", stat.Raisedtwopreflopraisers, (int)objects[53]);
                result = false;
            }
               if (stat.Totalbbswon != (int)objects[54])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Totalbbswon", stat.Totalbbswon, (int)objects[54]);
                result = false;
            }
               if (stat.Totalrakeincents != (int)objects[55])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Totalrakeincents", stat.Totalrakeincents, (int)objects[55]);
                result = false;
            }
               if (stat.Couldsqueeze != (int)objects[56])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Couldsqueeze", stat.Couldsqueeze, (int)objects[56]);
                result = false;
            }
               if (stat.Foldedtofourbetpreflop != (int)objects[57])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Foldedtofourbetpreflop", stat.Foldedtofourbetpreflop, (int)objects[57]);
                result = false;
            }
               if (stat.Totalhands != (int)objects[58])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Totalhands", stat.Totalhands, (int)objects[58]);
                result = false;
            }
               if (stat.Facedthreebetpreflop != (int)objects[59])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Facedthreebetpreflop", stat.Facedthreebetpreflop, (int)objects[59]);
                result = false;
            }
               if (stat.Facingflopcontinuationbet != (int)objects[60])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Facingflopcontinuationbet", stat.Facingflopcontinuationbet, (int)objects[60]);
                result = false;
            }
               if (stat.Rivercontinuationbetpossible != (int)objects[61])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Rivercontinuationbetpossible", stat.Rivercontinuationbetpossible, (int)objects[61]);
                result = false;
            }
               if (stat.Didcoldcall != (int)objects[62])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Didcoldcall", stat.Didcoldcall, (int)objects[62]);
                result = false;
            }
               if (stat.Wonlargeshowdownlimpedflop != (int)objects[63])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Wonlargeshowdownlimpedflop", stat.Wonlargeshowdownlimpedflop, (int)objects[63]);
                result = false;
            }
               if (stat.Sawflop != (int)objects[64])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Sawflop", stat.Sawflop, (int)objects[64]);
                result = false;
            }
               if (stat.Totalaggressivepostflopstreetsseen != (int)objects[65])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Totalaggressivepostflopstreetsseen", stat.Totalaggressivepostflopstreetsseen, (int)objects[65]);
                result = false;
            }
               if (stat.Didthreebet != (int)objects[66])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Didthreebet", stat.Didthreebet, (int)objects[66]);
                result = false;
            }
               if (stat.Raisedfourbetpreflop != (int)objects[67])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Raisedfourbetpreflop", stat.Raisedfourbetpreflop, (int)objects[67]);
                result = false;
            }
               if (stat.Sawlargeshowdownlimpedflop != (int)objects[68])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Sawlargeshowdownlimpedflop", stat.Sawlargeshowdownlimpedflop, (int)objects[68]);
                result = false;
            }
               if (stat.Raisedrivercontinuationbet != (int)objects[69])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Raisedrivercontinuationbet", stat.Raisedrivercontinuationbet, (int)objects[69]);
                result = false;
            }
               if (stat.Facingtwopreflopraisers != (int)objects[70])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Facingtwopreflopraisers", stat.Facingtwopreflopraisers, (int)objects[70]);
                result = false;
            }
               if (stat.Sawnonsmallshowdownlimpedflop != (int)objects[71])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Sawnonsmallshowdownlimpedflop", stat.Sawnonsmallshowdownlimpedflop, (int)objects[71]);
                result = false;
            }
               if (stat.Didsqueeze != (int)objects[72])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Didsqueeze", stat.Didsqueeze, (int)objects[72]);
                result = false;
            }
               if (stat.Calledrivercontinuationbet != (int)objects[73])
            {
                Debug.WriteLine("Player {0} / {1} - {2} : {3} -> {4}", name, (int)objects[23], "Calledrivercontinuationbet", stat.Calledrivercontinuationbet, (int)objects[73]);
                result = false;
            }
   
		   return result;
		}

// columns = Wonhand,Totalpostflopstreetsseen,Bigblindstealdefended,Calledthreebetpreflop,Turnfoldippassonflopcb,Rivercallippassonturncb,Playedyearandmonth,Turncontinuationbetmade,Wonhandwhensawturn,Turncontinuationbetpossible,Couldcoldcall,Totalamountwonincents,Facedfourbetpreflop,Flopcontinuationbetpossible,Riverfoldippassonturncb,Facingturncontinuationbet,Sawlargeshowdown,Raisedthreebetpreflop,Vpiphands,Facingrivercontinuationbet,Wonnonsmallshowdown,Totalbets,Riverraiseippassonturncb,Numberofplayers,Pfrhands,Smallblindstealdefended,Wonhandwhensawriver,Foldedtoflopcontinuationbet,Wonnonsmallshowdownlimpedflop,Calledfourbetpreflop,Rivercontinuationbetmade,Calledturncontinuationbet,Bigblindstealreraised,Totalcalls,Sawshowdown,Calledflopcontinuationbet,Bigblindstealattempted,Turnraiseippassonflopcb,Turncallippassonflopcb,Wonlargeshowdown,Couldthreebet,Smallblindstealattempted,Sawnonsmallshowdown,Foldedtothreebetpreflop,Foldedtorivercontinuationbet,Raisedturncontinuationbet,Smallblindstealreraised,Wonshowdown,Raisedflopcontinuationbet,Wonhandwhensawflop,Flopcontinuationbetmade,Foldedtoturncontinuationbet,Calledtwopreflopraisers,Raisedtwopreflopraisers,Totalbbswon,Totalrakeincents,Couldsqueeze,Foldedtofourbetpreflop,Totalhands,Facedthreebetpreflop,Facingflopcontinuationbet,Rivercontinuationbetpossible,Didcoldcall,Wonlargeshowdownlimpedflop,Sawflop,Totalaggressivepostflopstreetsseen,Didthreebet,Raisedfourbetpreflop,Sawlargeshowdownlimpedflop,Raisedrivercontinuationbet,Facingtwopreflopraisers,Sawnonsmallshowdownlimpedflop,Didsqueeze,Calledrivercontinuationbet,